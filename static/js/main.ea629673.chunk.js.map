{"version":3,"sources":["Components/login.js","Components/ManagerHome/AppHeader.js","Components/ManagerHome/ClientMap.js","serviceWorker.js","index.js"],"names":["Login","props","useState","email","setEmail","password","setPassword","loggedIn","setLoggedIn","console","log","history","useHistory","className","type","placeholder","onChange","event","target","value","href","class","onClick","preventDefault","push","alert","AppHeader","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","lng","icon","url","position","label","fontSize","text","color","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6ZAyFeA,MApFf,SAAeC,GAAQ,IAAD,EACMC,mBAAS,IADf,mBACbC,EADa,KACNC,EADM,OAEYF,mBAAS,IAFrB,mBAEbG,EAFa,KAEHC,EAFG,OAIYJ,oBAAS,GAJrB,mBAIbK,EAJa,KAIHC,EAJG,KAKpBC,QAAQC,IAAIH,GAUZ,IAAMI,EAAUC,cAyBhB,OACE,8BACE,6CACA,uCACA,yBAAKC,UAAU,cACb,gDACA,2BACEC,KAAK,QACLD,UAAU,eACVE,YAAY,cACZC,SA3CR,SAA2BC,GACzBb,EAASa,EAAMC,OAAOC,WA6CpB,yBAAKN,UAAU,cACb,2CACA,2BACEC,KAAK,WACLD,UAAU,eACVE,YAAY,iBACZC,SAhDR,SAA8BC,GAC5BX,EAAYW,EAAMC,OAAOC,UAiDrB,2BAAOL,KAAK,aACZ,2BAAOD,UAAU,sBAAjB,gBACA,uBAAGA,UAAU,cACX,uBAAGO,KAAK,YAAR,sBAGJ,yBAAKC,MAAM,gBAGX,4BACEP,KAAK,SACLD,UAAU,0BACVS,QAxDN,SAA2BL,GAEzB,GADAA,EAAMM,iBACQ,0BAAVpB,GAAkD,aAAbE,EAAyB,CAEhEG,GAAY,GAEZG,EAAQa,KADG,iBAEN,GAAc,uBAAVrB,GAA+C,eAAbE,EAA2B,CAEtEG,GAAY,GAEZG,EAAQa,KADG,mBAEN,GAAc,oBAAVrB,GAA4C,aAAbE,EAAyB,CAEjEG,GAAY,GAEZG,EAAQa,KADG,mBAGXC,MAAM,8BAERhB,QAAQC,IAAIP,EAAOE,KAiCjB,UAOA,uBAAGQ,UAAU,mBAAb,mBACkB,uBAAGO,KAAK,YAAR,a,gCC/DTM,I,eCsDIC,uBAAaC,yBAjEhC,WAeE,OACE,kBAAC,YAAD,CACEC,YAAa,GACbC,cAAe,CAAEC,IAAK,UAAWC,KAAM,WAEvC,kBAAC,SAAD,CACEC,KAAM,CAAEC,IAAK,wDACbC,SAAU,CAAEJ,IAAK,UAAWC,KAAM,UAClCI,MAAO,CACLC,SAAU,OACVC,KAAM,MACNC,MAAO,QACPC,WAAY,UAGhB,kBAAC,SAAD,CACEP,KAAM,CAAEC,IAAK,wDACbC,SAAU,CAAEJ,IAAK,SAAUC,KAAM,SACjCI,MAAO,CACLC,SAAU,OACVC,KAAM,MACNC,MAAO,QACPC,WAAY,UAIhB,kBAAC,SAAD,CACEP,KAAM,CAAEC,IAAK,yDACbC,SAAU,CAAEJ,IAAK,UAAWC,KAAM,UAClCI,MAAO,CACLC,SAAU,OACVC,KAAM,MACNC,MAAO,QACPC,WAAY,UAGhB,kBAAC,SAAD,CACEP,KAAM,CAAEC,IAAK,yDACbC,SAAU,CAAEJ,IAAK,QAASC,KAAM,SAChCI,MAAO,CACLC,SAAU,OACVC,KAAM,MACNC,MAAO,QACPC,WAAY,e,OCvDFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.ea629673.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./login.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// export default class Login extends Component {\r\nfunction Login(props) {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  console.log(loggedIn);\r\n\r\n  function handleEmailChange(event) {\r\n    setEmail(event.target.value);\r\n  }\r\n\r\n  function handlePasswordChange(event) {\r\n    setPassword(event.target.value);\r\n  }\r\n\r\n  const history = useHistory();\r\n\r\n  function handleSubmitClick(event) {\r\n    event.preventDefault();\r\n    if (email === \"kate@rainbowhaven.com\" && password === \"Rainbow1\") {\r\n      // alert(\"Log in successful\");\r\n      setLoggedIn(true);\r\n      let path = \"/manager\";\r\n      history.push(path);\r\n    } else if (email === \"johnjones@live.com\" && password === \"Lightning1\") {\r\n      // alert(\"Log in successful\");\r\n      setLoggedIn(true);\r\n      let path = \"/volunteer\";\r\n      history.push(path);\r\n    } else if (email === \"suziday@sky.com\" && password === \"Thunder1\") {\r\n      // alert(\"Log in successful\");\r\n      setLoggedIn(true);\r\n      let path = \"/volunteer\";\r\n      history.push(path);\r\n    } else {\r\n      alert(\"Incorrect Email/ password \");\r\n    }\r\n    console.log(email, password);\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <h3>Rainbow Haven</h3>\r\n      <h3>Sign In</h3>\r\n      <div className=\"form-group\">\r\n        <label>Email address</label>\r\n        <input\r\n          type=\"email\"\r\n          className=\"form-control\"\r\n          placeholder=\"Enter email\"\r\n          onChange={handleEmailChange}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Password</label>\r\n        <input\r\n          type=\"password\"\r\n          className=\"form-control\"\r\n          placeholder=\"Enter password\"\r\n          onChange={handlePasswordChange}\r\n        />\r\n        <input type=\"checkbox\"></input>\r\n        <label className=\"remember mt-3 ml-2\"> Remember me</label>\r\n        <p className=\"text-right\">\r\n          <a href=\"/sign-up\">Forgot password?</a>\r\n        </p>\r\n      </div>\r\n      <div class=\"text-center\">\r\n        {/* <Button variant=\"primary\" style={{ width: '100px' }}><a href=\"/volunteer-Main-Page\" style={{ color: 'white' }}>Submit</a></Button> */}\r\n      </div>\r\n      <button\r\n        type=\"submit\"\r\n        className=\"btn btn-block btn-login\"\r\n        onClick={handleSubmitClick}\r\n      >\r\n        Log In\r\n      </button>\r\n      <p className=\"text-right mt-2\">\r\n        Not registered? <a href=\"/sign-up\">SignUp</a>\r\n      </p>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction AppHeader() {\r\n  return (\r\n    <nav className=\"d-flex flex-row-reverse p-3\">\r\n      <Link to=\"/sign-in\" className=\"nav-link\">\r\n        Log Out\r\n      </Link>\r\n      <Link to=\"/pickUp-Volunteer\" className=\"nav-link\">\r\n        Pick Up Volunteer\r\n      </Link>\r\n      <a href=\"#\" className=\"nav-link \">\r\n        <i className=\"fas fa-user mr-2\"></i>Welcome Kate\r\n      </a>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default AppHeader;\r\n","import React from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\n\r\nfunction Map() {\r\n  //   Geocode.setApiKey(\"\");\r\n  //   // set response language. Defaults to english.\r\n  // Geocode.setLanguage(\"en\");\r\n  // // Get latidude & longitude from address.\r\n  // Geocode.fromAddress(\"33 cambridge street\").then(\r\n  //   response => {\r\n  //     const { lat, lng } = response.results[0].geometry.location;\r\n  //     console.log(lat, lng);\r\n  //   },\r\n  //   error => {\r\n  //     console.error(error);\r\n  //   }\r\n  // );\r\n\r\n  return (\r\n    <GoogleMap\r\n      defaultZoom={12}\r\n      defaultCenter={{ lat: 53.483959, lng: -2.244644 }}\r\n    >\r\n      <Marker\r\n        icon={{ url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\" }}\r\n        position={{ lat: 53.483959, lng: -2.244644 }}\r\n        label={{\r\n          fontSize: \"15px\",\r\n          text: \"Tom\",\r\n          color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      />\r\n      <Marker\r\n        icon={{ url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\" }}\r\n        position={{ lat: 53.46882, lng: -2.15621 }}\r\n        label={{\r\n          fontSize: \"15px\",\r\n          text: \"Tom\",\r\n          color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      />\r\n\r\n      <Marker\r\n        icon={{ url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\" }}\r\n        position={{ lat: 53.450714, lng: -1.994911 }}\r\n        label={{\r\n          fontSize: \"15px\",\r\n          text: \"Tom\",\r\n          color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      />\r\n      <Marker\r\n        icon={{ url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\" }}\r\n        position={{ lat: 53.4828, lng: -2.20435 }}\r\n        label={{\r\n          fontSize: \"15px\",\r\n          text: \"Tom\",\r\n          color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      />\r\n    </GoogleMap>\r\n  );\r\n}\r\n\r\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\r\n\r\nfunction ClientMap() {\r\n  return (\r\n    <div>\r\n      <WrappedMap\r\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places`}\r\n        loadingElement={<div style={{ height: `150%` }} />}\r\n        containerElement={<div style={{ height: `600px` }} />}\r\n        mapElement={<div style={{ height: `90%` }} />}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClientMap;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport Login from \"./Components/login\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Login />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}